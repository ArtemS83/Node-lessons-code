 3 ДЗ - работа с БД - функции
Немного позанудничаю.
Если вы это уже поняли, то просто пропускаем и можно не читать. Но если вы не совсем разобрались. То давайте разберемся с функциями
Функции обращения к БД в названии которых есть слово One - были созданы для работы с любыми полями, но обычно с любым другим кроме поля _id.
Для работы с полем _id есть специальные функции в названии которых уже содержится слово ById что позволяет немного сократить синтаксис обращения к БД
Начнем с первого варианта который я встерчала в некоторых дз, и почему так не надо делать -
findOne({ _id: id }) - тут вызывается функция - в названии которой используется - One -  в этой функции явно не указывается конкретное поле, по которому идет поиск в БД, по этому надо явно указывать название поля _id и значение которое передается - id  - ({ _id: id })
updateOne({ _id: id }, { token }) - тут тоже самое, в названии есть слово One и тут явно передается название поля _id по которому идет поиск и потом явно передаешь значение этого поля id
findOneAndUpdate({ _id: id },  { subscription },  { new: true } ) - аналогично.
НО ЭТО ВСЕ МОЖНО УПРОСТИТЬ НА ЧУТЬ-ЧУТЬ
_____________________________________________________________
Что бы не передавать явно указанное название поля - _id можно использовать функции, в названии которых уже содержится слово id. Это специальные - именованные функции для поиска по полю id, а именно
Model.findById()
Model.findByIdAndDelete()
Model.findByIdAndRemove()
Model.findByIdAndUpdate()
тут везде явно указывается название поля, по которому будет  производится поиск по базе данных - ById
по этому тут можно сразу передавать значение по которому происходит поиск - в этом примере мы его передаем в переменной - id
НО даже когда используются функции в названии которых уже явно указывается слово ById , по которому идет поиск в БД, все равно используется синтаксис, как будуд-то вызыватеся функция с записью -  One 
В двух ДЗ видела вот такую запись  -

```js
 const result = await Contact.findByIdAndUpdate({ _id: contactId },
    { ...body },
    { new: true },
  )
```

 Вот ссылка на официальную документацию, где показывается, как передаются аргументы - https://mongoosejs.com/docs/api/model.html#model_Model.findByIdAndUpdate
если вы используете findByIdAndUpdate достаточно сразу передавать id , не надо конкретизировать какое поле вы передаете - { _id: id } - findByIdAndUpdate( id, ...body, { new: true } )
или если вы хотите явно указывать поле, по которому вы обращаетесь с БД, то можно использовать findOneAndUpdate( { _id: id }, ...body, { new: true }) - и тут надо явно указывать по какому полю мы ищем элемент.
____________________________________
И такая же ситуация и с функцией удаления.
const result = await Contact.findByIdAndRemove({ _id: contactId })
 Вот ссылка на официальную документацию, где показывается, как передаются аргументы - https://mongoosejs.com/docs/api/model.html#model_Model.findByIdAndDelete
findByIdAndRemove(id) - не надо передавать { _id: id }, вы и так уже объявили, по какому полю ищите
__________________________________
3дз -  очень может не помешать проверка на правильность введенного id в роутах
Проверку можно делать через Joi - есть специальная доп-библиотека для проверки, используется в связе с с Joi
или можете через монгус
Build In Solution > Mongoose 5.7.12
If you are using Mongoose, we can test whether a String is of 12 bytes or a string of 24 hex characters by using mongoose build-in isValidObjectId.

```js
mongoose.isValidObjectId(string); /* will return true/false */
```